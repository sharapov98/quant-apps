import argparse
import numpy as np
import os
import warnings

import matplotlib.pyplot as plt
from sklearn.model_selection import GridSearchCV, KFold
from sklearn import metrics
from gkernel_estimator import GKernelEstimator


parser = argparse.ArgumentParser(description='Process arguments')

def enable_parsing(parser):
    """
    Function that adds the arguments to our parser

    Returns: None

    """
    parser.add_argument("--x", help="Training x values",
                        required=True)
    parser.add_argument("--y", help="Training y values",
                        required=True)
    parser.add_argument("--output", help="Output file location",
                        required=True)
    parser.add_argument("--num_folds", help="K in K-fold CV",
                        type=int, required=True)
    parser.add_argument("--xout", help="New x to predict")
    parser.add_argument('--plot', help="To plot",
                        action='store_true')
    return parser


parser = enable_parsing(parser)
args = parser.parse_args()

GIVEN_X = np.loadtxt(args.x)
GIVEN_Y = np.loadtxt(args.y)
K_FOLDS = args.num_folds
OUTPUT = args.output
X_OUT_LOCATION = args.xout
TO_PLOT = args.plot

# Bandwidths to check
param_grid = {'bandwidth': np.linspace(0.0001, 0.3, 30)}


def manual_scorer(y, y_pred):
    """
    A scorer used for cross validation

    Args:
        y: A 1d array of true results
        y_pred: A 1d array of predictions

    Returns: mean-squared error

    """
    n = len(y)
    before_sum = ((y - y_pred) ** 2) / n
    return np.sum(before_sum)


custom_mean_squared_scorer = metrics.make_scorer(manual_scorer,
                                                 greater_is_better=False)

grid_searcher = GridSearchCV(estimator=GKernelEstimator(),
                             param_grid=param_grid,
                             cv=KFold(n_splits=args.num_folds,
                                      shuffle=True),
                             scoring=custom_mean_squared_scorer)

# Ignore warnings generated by NaNs. They are automatically handled by
# the grid)searcher
warnings.filterwarnings("ignore")
grid_searcher.fit(GIVEN_X, GIVEN_Y)

best_estimator = grid_searcher.best_estimator_

if X_OUT_LOCATION:
    x_out = np.loadtxt(X_OUT_LOCATION)
else:
    x_out = GIVEN_X

final_predictions = best_estimator.predict(x_out)

if TO_PLOT:
    best_estimator.plot(50)
    plt.show()

output_dir = os.path.dirname(OUTPUT)
if output_dir != '':
    os.makedirs(output_dir, exist_ok=True)

np.savetxt(OUTPUT, final_predictions,
           fmt='%.15f')
